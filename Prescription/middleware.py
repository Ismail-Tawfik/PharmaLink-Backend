# Import necessary modules
from django.utils import timezone
from datetime import timedelta
from .models import Session

# Middleware class to handle session expiration
class SessionExpirationMiddleware:
    def __init__(self, get_response):
        """
        Initialize the middleware.

        Args:
            - get_response: The next middleware or view in the chain.
        """
        self.get_response = get_response

    def __call__(self, request):
        """
        Process incoming requests.

        Args:
            - request: The incoming HTTP request.

        Returns:
            - HttpResponse: The HTTP response generated by the view or subsequent middleware.
        """
        # Perform actions before the view is called

        # Get all sessions from the database
        sessions = Session.objects.all()
        
        # Iterate over each session and check for expiration
        for session in sessions:
            # Check if the session has expired (i.e., created more than 4 hours ago)
            if session.created_at < timezone.now() - timedelta(hours=4):
                # Mark the session as ended
                session.ended = True
                session.save()  # Save the changes to the session
        
        # Call the next middleware or view in the chain
        response = self.get_response(request)
        
        # Perform actions after the view is called (if needed)
        return response
